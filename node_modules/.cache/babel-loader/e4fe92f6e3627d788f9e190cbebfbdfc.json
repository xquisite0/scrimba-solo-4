{"ast":null,"code":"var _jsxFileName = \"/Users/zhouyuhang/projects/scrimba-4/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Question from \"./components/Question\";\nimport Start from \"./components/Start\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [started, setStarted] = React.useState(false);\n  const [questions, setQuestions] = React.useState([]);\n  const [optionsOrder, setOptionsOrder] = React.useState([]);\n  React.useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\").then(res => res.json()).then(data => {\n      setQuestions(data.results.map(result => ({ ...result,\n        selected: false\n      })));\n    }); // include a selected key in each object that starts with false\n  }, []);\n  console.log(questions);\n\n  function htmlDecode(input) {\n    var doc = new DOMParser().parseFromString(input, \"text/html\");\n    return doc.documentElement.textContent;\n  } // data.results => category, correct_answer, difficulty, \n  // incorrect_answers, question, type\n\n\n  console.log(questions); // write onclick function for question options, updates selected to reflect\n  // selected options for respective questions\n\n  function updatedSelected(question, option) {\n    setQuestions(prevQuestions => {\n      return prevQuestions.map(questionObj => {\n        return questionObj.question === question ? { ...questionObj,\n          selected: option\n        } : questionObj;\n      });\n    });\n  }\n\n  function isSelected(question, option) {\n    for (let i = 0; i < question.length; i++) {\n      if (question === questions[i].question) {\n        return option == questions[i].selected;\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    for (let i = 0; i < 5; i++) {\n      let randomIndex = Math.floor(Math.random() * 4);\n      setOptionsOrder(prevOptionsOrder => {\n        return [...prevOptionsOrder, randomIndex];\n      });\n    }\n  }, []);\n  let optionsOrderIndex = 0;\n  const questionElements = questions.map(questionObj => {\n    let questionAnswers = questionObj.incorrect_answers.slice();\n    questionAnswers.splice(optionsOrder[optionsOrderIndex], 0, questionObj.correct_answer);\n    optionsOrderIndex++;\n    let questionAnswersDecoded = questionAnswers.map(question => {\n      return htmlDecode(question);\n    });\n    let optionElements = questionAnswersDecoded.map(option => {\n      // add anonymous function to pass question and option into updatedSelected\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: isSelected(questionObj.question, option) ? \"question--option--selected\" : \"question--option\",\n        onClick: () => updatedSelected(questionObj.question, option),\n        children: option\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(Question, {\n      question: htmlDecode(questionObj.question),\n      options: questionAnswersDecoded,\n      optionElements: optionElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  }); // utilize controlled components for answers\n\n  /* const optionElements = options.map(option => {\n      return (\n          // update class when selected\n          <button className={\"question--option\"}>{option}</button>\n      )\n  }) */\n  // write onclick function for questions submit, checks correctness of each \n  // selected option, updates ui accordingly\n\n  function handleSubmit() {}\n\n  return started ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [questionElements, /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"check_answers\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"check_answers_button\",\n        onClick: handleSubmit,\n        children: \"Check answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 13\n  }, this) : /*#__PURE__*/_jsxDEV(Start, {\n    toggleStart: () => setStarted(true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"XO5U+a6GiRHuZs0aOiNn6FQYJrE=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/zhouyuhang/projects/scrimba-4/src/App.js"],"names":["React","Question","Start","App","started","setStarted","useState","questions","setQuestions","optionsOrder","setOptionsOrder","useEffect","fetch","then","res","json","data","results","map","result","selected","console","log","htmlDecode","input","doc","DOMParser","parseFromString","documentElement","textContent","updatedSelected","question","option","prevQuestions","questionObj","isSelected","i","length","randomIndex","Math","floor","random","prevOptionsOrder","optionsOrderIndex","questionElements","questionAnswers","incorrect_answers","slice","splice","correct_answer","questionAnswersDecoded","optionElements","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport Question from \"./components/Question\"\nimport Start from \"./components/Start\"\nimport \"./styles.css\"\n\nexport default function App() {\n\n    const [started, setStarted] = React.useState(false)\n    const [questions, setQuestions] = React.useState([])\n    const [optionsOrder, setOptionsOrder] = React.useState([])\n\n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then(res => res.json())\n            .then(data => {\n                setQuestions(data.results.map(result => (\n                    { ...result, selected: false }\n                )))\n            })\n        // include a selected key in each object that starts with false\n    }, [])\n    console.log(questions)\n\n    function htmlDecode(input) {\n        var doc = new DOMParser().parseFromString(input, \"text/html\");\n        return doc.documentElement.textContent;\n    }\n\n    // data.results => category, correct_answer, difficulty, \n    // incorrect_answers, question, type\n    console.log(questions)\n\n    // write onclick function for question options, updates selected to reflect\n    // selected options for respective questions\n    function updatedSelected(question, option) {\n        setQuestions(prevQuestions => {\n            return prevQuestions.map(questionObj => {\n                return questionObj.question === question ? { ...questionObj, selected: option } : questionObj\n            })\n        })\n    }\n    function isSelected(question, option) {\n        for (let i = 0; i < question.length; i++) {\n            if (question === questions[i].question) {\n                return option == questions[i].selected\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        for (let i = 0; i < 5; i++) {\n            let randomIndex = Math.floor(Math.random() * 4)\n            setOptionsOrder(prevOptionsOrder => {\n                return [...prevOptionsOrder, randomIndex]\n            })\n        }\n    }, [])\n    let optionsOrderIndex = 0\n    const questionElements = questions.map(questionObj => {\n        let questionAnswers = questionObj.incorrect_answers.slice()\n        questionAnswers.splice(optionsOrder[optionsOrderIndex], 0, questionObj.correct_answer)\n        optionsOrderIndex++\n        let questionAnswersDecoded = questionAnswers.map(question => {\n            return htmlDecode(question)\n        })\n        let optionElements = questionAnswersDecoded.map(option => {\n            // add anonymous function to pass question and option into updatedSelected\n            return <button className={isSelected(questionObj.question, option) ? \"question--option--selected\" : \"question--option\"} onClick={() => updatedSelected(questionObj.question, option)}>{option}</button>\n        })\n        return <Question question={htmlDecode(questionObj.question)} options={questionAnswersDecoded} optionElements={optionElements} />\n    })\n    // utilize controlled components for answers\n    /* const optionElements = options.map(option => {\n        return (\n            // update class when selected\n            <button className={\"question--option\"}>{option}</button>\n        )\n    }) */\n\n\n\n\n    // write onclick function for questions submit, checks correctness of each \n    // selected option, updates ui accordingly\n    function handleSubmit() {\n    }\n\n    return (\n        started ?\n            <div>\n                {questionElements}\n                <div id=\"check_answers\">\n                    <button id=\"check_answers_button\" onClick={handleSubmit}>Check answers</button>\n                </div>\n            </div>\n            :\n            <Start toggleStart={() => setStarted(true)} />\n\n    )\n}"]},"metadata":{},"sourceType":"module"}