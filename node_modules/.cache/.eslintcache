[{"/Users/zhouyuhang/projects/scrimba-4/src/index.js":"1","/Users/zhouyuhang/projects/scrimba-4/src/App.js":"2","/Users/zhouyuhang/projects/scrimba-4/src/components/Question.js":"3","/Users/zhouyuhang/projects/scrimba-4/src/components/Start.js":"4"},{"size":141,"mtime":1650344000637,"results":"5","hashOfConfig":"6"},{"size":6045,"mtime":1650755877697,"results":"7","hashOfConfig":"6"},{"size":572,"mtime":1650525369900,"results":"8","hashOfConfig":"6"},{"size":327,"mtime":1650345779552,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qwfbh0",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/zhouyuhang/projects/scrimba-4/src/index.js",[],[],"/Users/zhouyuhang/projects/scrimba-4/src/App.js",["24"],[],"import React from \"react\"\nimport Question from \"./components/Question\"\nimport Start from \"./components/Start\"\nimport \"./styles.css\"\n\nexport default function App() {\n\n    const [started, setStarted] = React.useState(false)\n    const [questions, setQuestions] = React.useState([])\n    const [optionsOrder, setOptionsOrder] = React.useState([])\n    const [submitted, setSubmitted] = React.useState(false)\n\n    React.useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=5&type=multiple\")\n            .then(res => res.json())\n            .then(data => {\n                setQuestions(data.results.map(result => (\n                    { ...result, selected: false }\n                )))\n            })\n        // include a selected key in each object that starts with false\n    }, [])\n    console.log(questions)\n\n    function htmlDecode(input) {\n        var doc = new DOMParser().parseFromString(input, \"text/html\");\n        return doc.documentElement.textContent;\n    }\n\n    // data.results => category, correct_answer, difficulty, \n    // incorrect_answers, question, type\n    console.log(questions)\n\n    // write onclick function for question options, updates selected to reflect\n    // selected options for respective questions\n    function updatedSelected(question, option) {\n        setQuestions(prevQuestions => {\n            return prevQuestions.map(questionObj => {\n                return questionObj.question === question ? { ...questionObj, selected: option } : questionObj\n            })\n        })\n    }\n    function isSelected(question, option) {\n        for (let i = 0; i < questions.length; i++) {\n            if (question === questions[i].question) {\n                return option === questions[i].selected\n            }\n        }\n    }\n    function isCorrect(question, option) {\n        for (let i = 0; i < questions.length; i++) {\n            if (question === questions[i].question) {\n                return option == htmlDecode(questions[i].correct_answer)\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        for (let i = 0; i < 5; i++) {\n            let randomIndex = Math.floor(Math.random() * 4)\n            setOptionsOrder(prevOptionsOrder => {\n                return [...prevOptionsOrder, randomIndex]\n            })\n        }\n    }, [])\n    let optionsOrderIndex = 0\n    const questionElements = questions.map(questionObj => {\n        let questionAnswers = questionObj.incorrect_answers.slice()\n        questionAnswers.splice(optionsOrder[optionsOrderIndex], 0, questionObj.correct_answer)\n        optionsOrderIndex++\n        let questionAnswersDecoded = questionAnswers.map(question => {\n            return htmlDecode(question)\n        })\n        // if selected, elif display correct, elif display false, else\n        // display correct, display false\n        let optionElements = questionAnswersDecoded.map(option => {\n            // add anonymous function to pass question and option into updatedSelected\n            return <button className={isSelected(questionObj.question, option) ? \"question--option--selected\" : \"question--option\"} onClick={() => updatedSelected(questionObj.question, option)}>{option}</button>\n        })\n        return <Question question={htmlDecode(questionObj.question)} options={questionAnswersDecoded} optionElements={optionElements} />\n    })\n    // utilize controlled components for answers\n    /* const optionElements = options.map(option => {\n        return (\n            // update class when selected\n            <button className={\"question--option\"}>{option}</button>\n        )\n    }) */\n\n    optionsOrderIndex = 0\n    let correctAnswers = 0\n    const submittedQuestionElements = questions.map(questionObj => {\n        let questionAnswers = questionObj.incorrect_answers.slice()\n        questionAnswers.splice(optionsOrder[optionsOrderIndex], 0, questionObj.correct_answer)\n        optionsOrderIndex++\n        let questionAnswersDecoded = questionAnswers.map(question => {\n            return htmlDecode(question)\n        })\n        // if is selected? correct/wrong change class\n        // elif its correct answer? change class\n        // else change class\n        let optionElements = questionAnswersDecoded.map(option => {\n            // add anonymous function to pass question and option into updatedSelected\n            let buttonClass\n            if (isSelected(questionObj.question, option)) {\n                console.log(option)\n                if (isCorrect(questionObj.question, option)) {\n                    correctAnswers++\n                    buttonClass = 'question--option2 selected--correct'\n                } else {\n                    buttonClass = 'question--option2 selected--incorrect'\n                }\n            } else if (isCorrect(questionObj.question, option)) {\n                buttonClass = 'question--option2 correct'\n            } else {\n                buttonClass = 'question--option2 incorrect'\n            }\n            return <button className={buttonClass} onClick={() => updatedSelected(questionObj.question, option)}>{option}</button>\n        })\n        return <Question question={htmlDecode(questionObj.question)} options={questionAnswersDecoded} optionElements={optionElements} />\n    })\n\n    // write onclick function for questions submit, checks correctness of each \n    // selected option, updates ui accordingly\n    function handleSubmit() {\n        setSubmitted(true)\n    }\n    function playAgain() {\n        window.location.reload()\n    }\n    console.log(submitted)\n\n    return (\n        started ?\n            <div>\n                {submitted ? submittedQuestionElements : questionElements}\n                <div id=\"check_answers\">\n                    {submitted && <div id=\"score\">You scored {correctAnswers}/5 correct answers</div>}\n                    <button id=\"check_answers_button\" onClick={submitted ? playAgain : handleSubmit}>{submitted ? \"Play again\" : \"Check answers\"}</button>\n                </div>\n            </div>\n            :\n            <Start toggleStart={() => setStarted(true)} />\n\n    )\n}","/Users/zhouyuhang/projects/scrimba-4/src/components/Question.js",[],[],[],"/Users/zhouyuhang/projects/scrimba-4/src/components/Start.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":53,"column":31,"nodeType":"27","messageId":"28","endLine":53,"endColumn":33},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]